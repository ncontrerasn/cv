<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Visual Computing</title><link>https://ncontrerasn.github.io/cv/docs/fotoMosaico/</link><description>Recent content on Visual Computing</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://ncontrerasn.github.io/cv/docs/fotoMosaico/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://ncontrerasn.github.io/cv/docs/fotoMosaico/hardware/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ncontrerasn.github.io/cv/docs/fotoMosaico/hardware/</guid><description>Hardware Rendering # let theShader; let video; let planeSide = 1000; let button; let debug; let slider; let Grayimgs = new Array(10); function imgArraySortLuma(imagesArray){ let lumaMediaArray = []; let index = 0; imagesArray.forEach(function(image) { lumaMediaArray[index] = calculateLuma(image); index &amp;#43;&amp;#43;; }); bubbleSort(lumaMediaArray, imagesArray, lumaMediaArray.length); return imagesArray; } function swap(lumaArray, imagesArray, xp, yp){ var temp = lumaArray[xp]; lumaArray[xp] = lumaArray[yp]; lumaArray[yp] = temp; var temp2 = imagesArray[xp]; imagesArray[xp] = imagesArray[yp]; imagesArray[yp] = temp2; } // An optimized version of Bubble Sort function bubbleSort(lumaArray, imagesArray, n){ var i, j; for (i = 0; i &amp;lt; n - 1; i&amp;#43;&amp;#43;){ for (j = 0; j &amp;lt; n - i - 1; j&amp;#43;&amp;#43;){ if (lumaArray[j] &amp;lt; lumaArray[j &amp;#43; 1]) swap(lumaArray, imagesArray, j, j &amp;#43; 1); } } } function calculateLuma(image){ var sum = 0; image.</description></item><item><title/><link>https://ncontrerasn.github.io/cv/docs/fotoMosaico/software/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ncontrerasn.github.io/cv/docs/fotoMosaico/software/</guid><description>Software Rendering # Es el proceso de generar una imagen a partir de un modelo por medio de software, lo que significa que no necesita ningun tipo de hardware para lograr la imagen.
Esta metodología es ampliamanete utilizada, ya sea en simuladores, videojuegos, peliculas y más cosas, lo que permite a las personas tener varias opciones para lograr mostrar el contenido deseado sin tener que invertir en hardware.
Uno de los beneficios del este tipo de renderización es la no dependencia del hardware en caso de que estos fallen por algina condición fisica o la amplia cantidad de paquetes que sirven para este fin, como SwiftShadder o WARP.</description></item></channel></rss>